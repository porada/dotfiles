#!/bin/sh

__upgrading() {
  printf "\n\033[1;33mÂ· Upgrading %s\033[0m\n" "$*"
}

get_current_revision() {
  md5 -q $(realpath "$0")
}

UPGRADER_REVISION=$(get_current_revision)

# Update dotfiles
if hash git 2> /dev/null && [ -n "$DOTFILES_PATH" ]; then
  __upgrading dotfiles
  git -C "$DOTFILES_PATH" pull

  # Run the upgrader again if the script has changed
  if [ $(get_current_revision) != "$UPGRADER_REVISION" ]; then
    exec "$DOTFILES_PATH"/bin/dotfiles-upgrade
  fi

  "$DOTFILES_PATH"/bin/dotfiles-init
  "$DOTFILES_PATH"/bin/dotfiles-install
fi

# Update Homebrew and installed apps
if hash brew 2> /dev/null; then
  __upgrading brew
  brew_cache_path=$(brew --cache)
  brew update
  brew upgrade
  brew cleanup --scrub
  rm -rf $(brew --cache)
fi

# Re-link and configure installed apps
if hash git 2> /dev/null && [ -n "$DOTFILES_PATH" ]; then
  __upgrading links
  "$DOTFILES_PATH"/bin/dotfiles-install
  "$DOTFILES_PATH"/bin/dotfiles-macos
fi

# Update globally installed Node packages
if hash npm 2> /dev/null; then
  export NODE_NO_WARNINGS=1

  __upgrading npm
  npm --global --no-fund install npm
  npm --global --no-fund update

  unset NODE_NO_WARNINGS
fi

# Update Vim plugins
if hash vim 2> /dev/null; then
  __upgrading vim plugins
  vim -c "PlugUpgrade | PlugUpdate | PlugClean! | quitall"
fi

# Update Fish plugins
if hash fish 2> /dev/null; then
  __upgrading fisher
  fish -c "fisher update"
fi
